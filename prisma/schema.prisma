generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model test {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  message    String?
}

model Event {
  id                                       Int                     @id @default(autoincrement())
  description                              String?                 @db.VarChar
  end_time                                 DateTime?               @db.Timestamp(6)
  event_type                               String?
  location                                 String?                 @db.VarChar
  name                                     String                  @db.VarChar
  parent_event_id                          Int?
  start_time                               DateTime?               @db.Timestamp(6)
  icon                                     String?
  banner                                   String?
  status                                   String?                 @default("Draft")
  minimum_attendance                       Int?
  maximum_attendance                       Int?
  optimal_attendance                       Int?
  slug                                     String
  creator                                  Int?
  continuation_of                          Int?
  scene                                    BigInt?
  attendance_type                          String?
  participant_type                         String?
  invitation_type                          String?
  Attendance                               Attendance[]
  Event_Event_continuation_ofToEvent       Event?                  @relation("Event_continuation_ofToEvent", fields: [continuation_of], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_Event_Event_continuation_ofToEvent Event[]                 @relation("Event_continuation_ofToEvent")
  Profile                                  Profile?                @relation(fields: [creator], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Event                                    Event?                  @relation("EventToEvent", fields: [parent_event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_Event                              Event[]                 @relation("EventToEvent")
  Scene                                    Scene?                  @relation(fields: [scene], references: [id], onDelete: NoAction, onUpdate: NoAction)
  EventFile                                EventFile[]
  EventGroup                               EventGroup[]
  EventInterest                            EventInterest[]
  EventSchedule                            EventSchedule[]
  EventStat                                EventStat[]
  GroupEventAssociation                    GroupEventAssociation[]
  Occurrence                               Occurrence[]
}

model EventFile {
  id       Int    @id @default(autoincrement())
  event_id Int
  url      String @db.VarChar
  Event    Event  @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model EventGroup {
  id       Int   @id @default(autoincrement())
  event_id Int
  group_id Int
  Event    Event @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Group    Group @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model EventInterest {
  id          Int      @id @default(autoincrement())
  event_id    Int
  interest_id Int
  Event       Event    @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Interest    Interest @relation(fields: [interest_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model EventSchedule {
  id         Int      @id @default(autoincrement())
  event_id   Int
  start_time DateTime @db.Timestamp(6)
  end_time   DateTime @db.Timestamp(6)
  Event      Event    @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model EventStat {
  id           BigInt    @id @default(autoincrement())
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  event_id     Int?
  stat_type_id BigInt?
  value        Decimal?  @db.Decimal
  Event        Event?    @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  StatType     StatType? @relation(fields: [stat_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model FriendRequest {
  id                                         Int     @id @default(autoincrement())
  sender_id                                  Int
  receiver_id                                Int
  status                                     String  @default("pending") @db.VarChar
  Profile_FriendRequest_receiver_idToProfile Profile @relation("FriendRequest_receiver_idToProfile", fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Profile_FriendRequest_sender_idToProfile   Profile @relation("FriendRequest_sender_idToProfile", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Group {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar
  description           String?                 @db.VarChar
  avatar_url            String?                 @db.VarChar
  private               Boolean                 @default(false)
  group_type            String?                 @db.VarChar
  parent_group          Int?
  creation_date         DateTime                @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  location              String?
  status                Int?                    @db.SmallInt
  slug                  String
  EventGroup            EventGroup[]
  Group                 Group?                  @relation("GroupToGroup", fields: [parent_group], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_Group           Group[]                 @relation("GroupToGroup")
  GroupEventAssociation GroupEventAssociation[]
  GroupInterest         GroupInterest[]
  GroupMember           GroupMember[]
  GroupStat             GroupStat[]
  RawStat               RawStat[]
}

model GroupEventAssociation {
  id       Int   @id @default(autoincrement())
  group_id Int
  event_id Int
  Event    Event @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Group    Group @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model GroupInterest {
  id          Int      @id @default(autoincrement())
  group_id    Int
  interest_id Int
  Group       Group    @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Interest    Interest @relation(fields: [interest_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model GroupMember {
  id         Int     @id @default(autoincrement())
  group_id   Int
  profile_id Int
  role       String  @default("member") @db.VarChar
  Group      Group   @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Profile    Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Interest {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar
  category        String?           @db.VarChar
  EventInterest   EventInterest[]
  GroupInterest   GroupInterest[]
  ProfileInterest ProfileInterest[]
}

model Message {
  id                                   Int      @id @default(autoincrement())
  content                              String   @db.VarChar
  sender_id                            Int
  receiver_id                          Int
  timestamp                            DateTime @db.Timestamp(6)
  Profile_Message_receiver_idToProfile Profile  @relation("Message_receiver_idToProfile", fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Profile_Message_sender_idToProfile   Profile  @relation("Message_sender_idToProfile", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Profile {
  id                                                Int               @id @default(autoincrement())
  avatar_url                                        String?           @db.VarChar
  bio                                               String?           @db.VarChar
  birthday                                          DateTime?         @db.Date
  location                                          String?           @db.VarChar
  private                                           Boolean           @default(false)
  created_at                                        DateTime          @default(now())
  handle                                            String            @unique
  name                                              String            @db.VarChar
  pronouns                                          String?
  updated_at                                        DateTime?         @updatedAt
  parent_id                                         Int?
  Event                                             Event[]
  FriendRequest_FriendRequest_receiver_idToProfile  FriendRequest[]   @relation("FriendRequest_receiver_idToProfile")
  FriendRequest_FriendRequest_sender_idToProfile    FriendRequest[]   @relation("FriendRequest_sender_idToProfile")
  GroupMember                                       GroupMember[]
  Message_Message_receiver_idToProfile              Message[]         @relation("Message_receiver_idToProfile")
  Message_Message_sender_idToProfile                Message[]         @relation("Message_sender_idToProfile")
  User_Profile_parent_idToUser                      User?             @relation("Profile_parent_idToUser", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ProfileFollow_ProfileFollow_follower_idToProfile  ProfileFollow[]   @relation("ProfileFollow_follower_idToProfile")
  ProfileFollow_ProfileFollow_following_idToProfile ProfileFollow[]   @relation("ProfileFollow_following_idToProfile")
  ProfileInterest                                   ProfileInterest[]
  ProfileStat                                       ProfileStat[]
  RawStat                                           RawStat[]
  SocialLink                                        SocialLink[]
  TemplateStats                                     TemplateStats[]
  User_User_current_profile_idToProfile             User[]            @relation("User_current_profile_idToProfile")
}

model ProfileFollow {
  id                                          Int     @id @default(autoincrement())
  follower_id                                 Int
  following_id                                Int
  Profile_ProfileFollow_follower_idToProfile  Profile @relation("ProfileFollow_follower_idToProfile", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Profile_ProfileFollow_following_idToProfile Profile @relation("ProfileFollow_following_idToProfile", fields: [following_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model ProfileInterest {
  id          Int      @id @default(autoincrement())
  profile_id  Int
  interest_id Int
  Interest    Interest @relation(fields: [interest_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Profile     Profile  @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model SocialLink {
  id         Int     @id @default(autoincrement())
  profile_id Int
  platform   String  @db.VarChar
  url        String  @db.VarChar
  Profile    Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id                                       Int                       @id @default(autoincrement())
  username                                 String                    @unique
  email                                    String                    @unique @db.VarChar
  notification_settings_id                 Int?
  settings                                 String?                   @default("none")
  user_status                              String                    @default("active")
  current_profile_id                       Int?
  Attendance                               Attendance[]
  Profile_Profile_parent_idToUser          Profile[]                 @relation("Profile_parent_idToUser")
  Profile_User_current_profile_idToProfile Profile?                  @relation("User_current_profile_idToProfile", fields: [current_profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  UserNotificationSettings                 UserNotificationSettings? @relation(fields: [notification_settings_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model UserNotificationSettings {
  id                  Int     @id @default(autoincrement())
  email_notifications Boolean @default(true)
  push_notifications  Boolean @default(true)
  User                User[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Scene {
  id          BigInt    @id @default(autoincrement())
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  name        String?
  icon        String?
  description String?
  slug        String
  Event       Event[]
}

model Attendance {
  id         Int       @id(map: "UserEventInteraction_pkey") @default(autoincrement())
  user_id    Int
  event_id   Int
  status     String
  created_at DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updated_at DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  Event      Event     @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model GroupStat {
  id           BigInt    @id @default(autoincrement())
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  group_id     Int?
  stat_type_id BigInt?
  value        Decimal?  @db.Decimal
  Group        Group?    @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  StatType     StatType? @relation(fields: [stat_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Occurrence {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  event_id   Int?
  period     Int?      @db.SmallInt
  time       String?
  extra_info String?
  Event      Event?    @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  RawStat    RawStat[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model OccurrenceType {
  id                  BigInt                @id @default(autoincrement())
  created_at          DateTime?             @default(now()) @db.Timestamptz(6)
  name                String?
  description         String?
  activity            String?
  StatModifier        StatModifier[]
  TemplateOccurrences TemplateOccurrences[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProfileStat {
  id           BigInt    @id @default(autoincrement())
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  profile_id   Int?
  stat_type_id BigInt?
  value        Decimal?  @db.Decimal
  Profile      Profile?  @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  StatType     StatType? @relation(fields: [stat_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model RawStat {
  id               BigInt       @id @default(autoincrement())
  created_at       DateTime?    @default(now()) @db.Timestamptz(6)
  occurrence_id    BigInt?
  profile_id       Int?
  group_id         Int?
  raw_stat_type_id BigInt?
  Group            Group?       @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Occurrence       Occurrence?  @relation(fields: [occurrence_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Profile          Profile?     @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  RawStatType      RawStatType? @relation(fields: [raw_stat_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model RawStatType {
  id                                        BigInt         @id @default(autoincrement())
  created_at                                DateTime?      @default(now()) @db.Timestamptz(6)
  name                                      String?
  description                               String?
  category                                  String?
  activity                                  String?
  higher_is_better                          Boolean        @default(true)
  RawStat                                   RawStat[]
  StatModifier                              StatModifier[]
  StatType_StatType_raw_stat_1ToRawStatType StatType[]     @relation("StatType_raw_stat_1ToRawStatType")
  StatType_StatType_raw_stat_2ToRawStatType StatType[]     @relation("StatType_raw_stat_2ToRawStatType")
  StatType_StatType_raw_stat_3ToRawStatType StatType[]     @relation("StatType_raw_stat_3ToRawStatType")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model StatModifier {
  id                 BigInt          @id @default(autoincrement())
  created_at         DateTime?       @default(now()) @db.Timestamptz(6)
  occurrence_type_id BigInt?
  raw_stat_type_id   BigInt?
  modifier_value     Int?            @db.SmallInt
  OccurrenceType     OccurrenceType? @relation(fields: [occurrence_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  RawStatType        RawStatType?    @relation(fields: [raw_stat_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model StatType {
  id                                           BigInt                  @id @default(autoincrement())
  created_at                                   DateTime?               @default(now()) @db.Timestamptz(6)
  name                                         String?
  description                                  String?
  raw_stat_1                                   BigInt?
  raw_stat_2                                   BigInt?
  raw_stat_3                                   BigInt?
  expression                                   String?
  agg_stat_1                                   BigInt?
  agg_stat_2                                   BigInt?
  category                                     String?
  activity                                     String?
  higher_is_better                             Boolean                 @default(true)
  shortform                                    String?
  EventStat                                    EventStat[]
  GroupStat                                    GroupStat[]
  ProfileStat                                  ProfileStat[]
  StatType_StatType_agg_stat_1ToStatType       StatType?               @relation("StatType_agg_stat_1ToStatType", fields: [agg_stat_1], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_StatType_StatType_agg_stat_1ToStatType StatType[]              @relation("StatType_agg_stat_1ToStatType")
  StatType_StatType_agg_stat_2ToStatType       StatType?               @relation("StatType_agg_stat_2ToStatType", fields: [agg_stat_2], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_StatType_StatType_agg_stat_2ToStatType StatType[]              @relation("StatType_agg_stat_2ToStatType")
  RawStatType_StatType_raw_stat_1ToRawStatType RawStatType?            @relation("StatType_raw_stat_1ToRawStatType", fields: [raw_stat_1], references: [id], onDelete: NoAction, onUpdate: NoAction)
  RawStatType_StatType_raw_stat_2ToRawStatType RawStatType?            @relation("StatType_raw_stat_2ToRawStatType", fields: [raw_stat_2], references: [id], onDelete: NoAction, onUpdate: NoAction)
  RawStatType_StatType_raw_stat_3ToRawStatType RawStatType?            @relation("StatType_raw_stat_3ToRawStatType", fields: [raw_stat_3], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TemplateStatInstances                        TemplateStatInstances[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TemplateOccurrences {
  id                BigInt          @id @default(autoincrement())
  created_at        DateTime?       @default(now()) @db.Timestamptz(6)
  template_id       BigInt?
  occurence_type_id BigInt?
  OccurrenceType    OccurrenceType? @relation(fields: [occurence_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TemplateStats     TemplateStats?  @relation(fields: [template_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TemplateStatInstances {
  id            BigInt         @id @default(autoincrement())
  created_at    DateTime?      @default(now()) @db.Timestamptz(6)
  template_id   BigInt?
  stat_type_id  BigInt?
  StatType      StatType?      @relation(fields: [stat_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TemplateStats TemplateStats? @relation(fields: [template_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TemplateStats {
  id                    BigInt                  @id(map: "TemplateEventStat_pkey") @default(autoincrement())
  created_at            DateTime?               @default(now()) @db.Timestamptz(6)
  creator               Int?
  published             Boolean?
  name                  String?
  description           String?
  activity              String?
  type                  String?
  TemplateOccurrences   TemplateOccurrences[]
  TemplateStatInstances TemplateStatInstances[]
  Profile               Profile?                @relation(fields: [creator], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum eventtype {
  Tournament
  Bracket
  Game
  Match
  GeneralEvent
}
